# cloudbuild.yaml (FINAL - Corrected Docker Command)

steps:
  # ---------------------------------------------------------------------------
  # STEP 0: Enable all required services for the pipeline to run.
  # ---------------------------------------------------------------------------
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    id: 'Enable APIs'
    entrypoint: 'gcloud'
    args:
      - 'services'
      - 'enable'
      - 'containerregistry.googleapis.com'
      - 'artifactregistry.googleapis.com'
      - 'cloudbuild.googleapis.com'
      - 'run.googleapis.com'
      - 'firebase.googleapis.com'
      - 'iam.googleapis.com'

  # ---------------------------------------------------------------------------
  # STEP 1: Build the backend Docker image
  # THE FIX IS HERE: Separating build and push back into two steps.
  # ---------------------------------------------------------------------------
  - name: 'gcr.io/cloud-builders/docker'
    id: 'Build Backend Image'
    args:
      - 'build'
      - '--tag=${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_AR_REPO_NAME}/api-backend:latest'
      - './backend'
    wait_for: ['Enable APIs']

  # ---------------------------------------------------------------------------
  # STEP 2: Push the backend Docker image
  # ---------------------------------------------------------------------------
  - name: 'gcr.io/cloud-builders/docker'
    id: 'Push Backend Image'
    args: ['push', '${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_AR_REPO_NAME}/api-backend:latest']

  # ---------------------------------------------------------------------------
  # STEP 3: Deploy the backend image to Cloud Run
  # ---------------------------------------------------------------------------
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    id: 'Deploy Backend to Cloud Run'
    entrypoint: 'gcloud'
    args:
      - 'run'
      - 'deploy'
      - 'api-backend'
      - '--image=${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_AR_REPO_NAME}/api-backend:latest'
      - '--region'
      - '${_REGION}'
      - '--allow-unauthenticated'
    wait_for: ['Push Backend Image']

  # ---------------------------------------------------------------------------
  # STEP 4: Inject the backend URL into the frontend HTML
  # ---------------------------------------------------------------------------
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    id: 'Inject Backend URL'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        BACKEND_URL=$$(gcloud run services describe api-backend --platform managed --region ${_REGION} --format 'value(status.url)')
        sed -i "s|YOUR_BACKEND_URL_WILL_GO_HERE|$${BACKEND_URL}|g" frontend/index.html
    wait_for: ['Deploy Backend to Cloud Run']

  # ---------------------------------------------------------------------------
  # STEP 5: Deploy Frontend by self-installing Firebase tools
  # ---------------------------------------------------------------------------
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    id: 'Deploy Frontend to Firebase'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        apt-get update && apt-get install -y nodejs npm
        npm install -g firebase-tools
        cd frontend
        firebase deploy --project=$$PROJECT_ID --only=hosting --non-interactive --debug
    wait_for: ['Inject Backend URL']

# Define substitutions for our variables
substitutions:
  _REGION: 'us-central1'
  _AR_REPO_NAME: 'ai-hiring-platform-backend'

options:
  logging: CLOUD_LOGGING_ONLY