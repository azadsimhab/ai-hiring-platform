# cloudbuild.yaml (FINAL - Self-Contained Build & Deploy)

steps:
  # STEP 0: Enable all required APIs for the project.
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    id: 'Enable APIs'
    entrypoint: 'gcloud'
    args:
      - 'services'
      - 'enable'
      - 'run.googleapis.com'
      - 'iam.googleapis.com'
      - 'sqladmin.googleapis.com'
      - 'firebase.googleapis.com'
      - 'secretmanager.googleapis.com'
      - 'artifactregistry.googleapis.com'
      - 'generativelanguage.googleapis.com'

  # STEP 1: Build the backend Docker image.
  - name: 'gcr.io/cloud-builders/docker'
    id: 'Build Backend'
    args:
      - 'build'
      - '--tag=${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_AR_REPO_NAME}/api-backend:latest'
      - '-f'
      - 'backend/Dockerfile'
      - '.'
    wait_for: ['Enable APIs']

  # STEP 2: Push the backend image.
  - name: 'gcr.io/cloud-builders/docker'
    id: 'Push Backend'
    args: ['push', '${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_AR_REPO_NAME}/api-backend:latest']
    wait_for: ['Build Backend']

  # STEP 3: Deploy the backend service to Cloud Run.
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    id: 'Deploy Backend'
    entrypoint: 'gcloud'
    args:
      - 'run'
      - 'deploy'
      - 'api-backend'
      - '--image=${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_AR_REPO_NAME}/api-backend:latest'
      - '--region'
      - '${_REGION}'
      - '--allow-unauthenticated'
      - '--add-cloudsql-instances=${PROJECT_ID}:${_REGION}:hiring-platform-main-db'
      - '--update-secrets=DB_PASS=db-user-password:latest,GOOGLE_API_KEY=GOOGLE_API_KEY:latest'
      - '--set-env-vars=DB_USER=hiring_app_user,DB_NAME=hiring_platform_db,INSTANCE_CONNECTION_NAME=${PROJECT_ID}:${_REGION}:hiring-platform-main-db,GCP_PROJECT_ID=${PROJECT_ID},GCP_REGION=${_REGION}'
    wait_for: ['Push Backend']

  # ---------------------------------------------------------------------------
  # STEP 4: THE FINAL FIX - A single, robust step for all frontend operations.
  # ---------------------------------------------------------------------------
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    id: 'Build and Deploy Frontend'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        # Install specific Node.js version and suppress verbose output
        echo "INFO: Installing Node.js v20..."
        apt-get update -y > /dev/null && apt-get install -y curl > /dev/null
        curl -fsSL https://deb.nodesource.com/setup_20.x | bash - > /dev/null
        apt-get install -y nodejs > /dev/null
        echo "INFO: Node.js installation complete."
        
        # Install Firebase Tools globally inside this step's environment
        echo "INFO: Installing Firebase Tools..."
        npm install -g firebase-tools
        echo "INFO: Firebase Tools installation complete."

        # Go into frontend directory, install dependencies, build the React app, and deploy
        echo "INFO: Building React application..."
        cd frontend && \
        npm install && \
        npm run build && \
        echo "INFO: React build complete. Deploying to Firebase..." && \
        firebase deploy --project=$PROJECT_ID --only=hosting --non-interactive
        echo "INFO: Firebase deployment complete."
    wait_for: ['Deploy Backend']


# Use the powerful service account you created for all steps.
service_account: 'projects/job-ai-c6f0a/serviceAccounts/hiring-ai@job-ai-c6f0a.iam.gserviceaccount.com'

# Define substitutions
substitutions:
  _REGION: 'us-central1'
  _AR_REPO_NAME: 'ai-hiring-platform-backend'

options:
  logging: CLOUD_LOGGING_ONLY