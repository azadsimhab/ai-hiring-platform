
steps:
  # STEP 0: Enable all required APIs for the project.
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    id: 'Enable APIs'
    entrypoint: 'gcloud'
    args:
      - 'services'
      - 'enable'
      - 'run.googleapis.com'
      - 'iam.googleapis.com'
      - 'sqladmin.googleapis.com'
      - 'firebase.googleapis.com'
      - 'secretmanager.googleapis.com'
      - 'artifactregistry.googleapis.com'
      - 'generativelanguage.googleapis.com'

  # STEP 1: Build the backend Docker image.
  - name: 'gcr.io/cloud-builders/docker'
    id: 'Build Backend'
    args:
      - 'build'
      - '--tag=${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_AR_REPO_NAME}/api-backend:latest'
      - '-f'
      - 'backend/Dockerfile'
      - '.'
    wait_for: ['Enable APIs']

  # STEP 2: Push the backend image to Artifact Registry.
  - name: 'gcr.io/cloud-builders/docker'
    id: 'Push Backend'
    args:
      - 'push'
      - '${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_AR_REPO_NAME}/api-backend:latest'
    wait_for: ['Build Backend']

  # STEP 3: Deploy the backend service to Cloud Run with all configurations.
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    id: 'Deploy Backend'
    entrypoint: 'gcloud'
    args:
      - 'run'
      - 'deploy'
      - 'api-backend'
      - '--image=${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_AR_REPO_NAME}/api-backend:latest'
      - '--region'
      - '${_REGION}'
      - '--allow-unauthenticated'
      - '--add-cloudsql-instances=${PROJECT_ID}:${_REGION}:hiring-platform-main-db'
      - '--update-secrets=DB_PASS=db-user-password:latest,GOOGLE_API_KEY=GOOGLE_API_KEY:latest'
      - '--set-env-vars=DB_USER=hiring_app_user,DB_NAME=hiring_platform_db,INSTANCE_CONNECTION_NAME=${PROJECT_ID}:${_REGION}:hiring-platform-main-db,GCP_PROJECT_ID=${PROJECT_ID},GCP_REGION=${_REGION}'
    wait_for: ['Push Backend']

  # ---------------------------------------------------------------------------
  # STEP 4: THE FINAL FIX - Use a dedicated Node.js builder for the frontend.
  # This is the industry-standard way to build Node.js applications in CI/CD.
  # It installs dependencies, runs the build, and prepares for deployment.
  # ---------------------------------------------------------------------------
  - name: 'gcr.io/cloud-builders/npm:latest'
    id: 'Build Frontend'
    args: ['install']
    dir: 'frontend'
    wait_for: ['Deploy Backend']

  - name: 'gcr.io/cloud-builders/npm:latest'
    id: 'Run React Build'
    args: ['run', 'build']
    dir: 'frontend'
    wait_for: ['Build Frontend']

  # ---------------------------------------------------------------------------
  # STEP 5: Deploy the built frontend to Firebase Hosting.
  # This step uses the official firebase builder, which is now reliable.
  # ---------------------------------------------------------------------------
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    id: 'Deploy Frontend'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        npm install -g firebase-tools
        firebase use --add ${PROJECT_ID} --token "$$FIREBASE_TOKEN"
        firebase deploy --only hosting --project ${PROJECT_ID} --non-interactive
    dir: 'frontend'
    wait_for: ['Run React Build']
    secret_env: ['FIREBASE_TOKEN']

# Define substitutions
substitutions:
  _REGION: 'us-central1'
  _AR_REPO_NAME: 'ai-hiring-platform-backend'

# Grant the build access to the Firebase Token secret
available_secrets:
  secret_manager:
  - version_name: projects/job-ai-c6f0a/secrets/FIREBASE_TOKEN/versions/latest
    env: 'FIREBASE_TOKEN'

options:
  logging: CLOUD_LOGGING_ONLY