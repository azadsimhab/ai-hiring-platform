from pydantic import BaseModel
from typing import Optional

class HiringRequestBase(BaseModel):
    """
    Base schema with fields common to both creating and reading a hiring request.
    """
    job_title: str
    department: str
    manager: str
    level: Optional[str] = None
    salary_range: Optional[str] = None
    benefits_perks: Optional[str] = None
    locations: Optional[str] = None
    urgency: Optional[str] = None
    other_remarks: Optional[str] = None
    employment_type: Optional[str] = None
    hiring_type: Optional[str] = None


class HiringRequestCreate(HiringRequestBase):
    """
    Schema used when creating a new hiring request via the API.
    It inherits all fields from the base schema.
    """
    pass # No additional fields needed for creation


class HiringRequest(HiringRequestBase):
    """
    Schema used when reading a hiring request from the API.
    It includes fields that are generated by the database, like the 'id'.
    """
    id: int

    class Config:
        # This tells Pydantic to read the data even if it is not a dict,
        # but an ORM model (like our HiringRequest model).
        from_attributes = True