from pydantic import BaseModel, Field, validator
from typing import List, Optional, Any
from datetime import datetime

# Job Description Schemas
class JobDescriptionBase(BaseModel):
    title: str = Field(..., description="Job title", example="Senior Software Engineer")
    overview: str = Field(..., description="Overview of the job and company", example="Join our innovative team...")
    responsibilities: List[str] = Field(
        default_factory=list,
        description="List of job responsibilities",
        example=["Design and implement scalable software solutions", "Collaborate with cross-functional teams"]
    )
    required_qualifications: List[str] = Field(
        default_factory=list,
        description="List of required qualifications",
        example=["5+ years of software development experience", "Strong knowledge of Python"]
    )
    preferred_qualifications: List[str] = Field(
        default_factory=list,
        description="List of preferred qualifications",
        example=["Experience with cloud platforms", "Knowledge of machine learning frameworks"]
    )
    benefits: List[str] = Field(
        default_factory=list,
        description="List of benefits and perks",
        example=["Competitive salary", "Remote work options", "Health insurance"]
    )
    equal_opportunity_statement: Optional[str] = Field(
        None,
        description="Equal opportunity employer statement",
        example="We are an equal opportunity employer..."
    )
    status: str = Field(
        "draft",
        description="Status of the job description",
        example="draft"
    )
    ai_generated: bool = Field(
        False,
        description="Whether the job description was generated by AI"
    )


class JobDescriptionCreate(JobDescriptionBase):
    hiring_request_id: Optional[int] = Field(
        None,
        description="ID of the associated hiring request",
        example=1
    )


class JobDescriptionUpdate(BaseModel):
    title: Optional[str] = None
    overview: Optional[str] = None
    responsibilities: Optional[List[str]] = None
    required_qualifications: Optional[List[str]] = None
    preferred_qualifications: Optional[List[str]] = None
    benefits: Optional[List[str]] = None
    equal_opportunity_statement: Optional[str] = None
    status: Optional[str] = None
    
    class Config:
        validate_assignment = True


class JobDescriptionResponse(JobDescriptionBase):
    id: int
    hiring_request_id: Optional[int] = None
    created_at: datetime
    updated_at: Optional[datetime] = None
    
    class Config:
        orm_mode = True


# Interview Question Schemas
class InterviewQuestionBase(BaseModel):
    question: str = Field(..., description="The interview question text", example="Describe a challenging project you worked on and how you overcame obstacles.")
    type: str = Field(..., description="Type of question (behavioral, technical, situational)", example="behavioral")
    difficulty: str = Field(..., description="Difficulty level (easy, medium, hard)", example="medium")
    purpose: Optional[str] = Field(None, description="Purpose of the question", example="Assesses problem-solving skills and resilience")
    ideal_answer_points: List[str] = Field(
        default_factory=list,
        description="Key points that should be covered in an ideal answer",
        example=["Clearly describes the project and challenges", "Explains specific actions taken", "Discusses outcomes and learnings"]
    )
    ai_generated: bool = Field(
        False,
        description="Whether the question was generated by AI"
    )


class InterviewQuestionCreate(InterviewQuestionBase):
    job_description_id: int = Field(..., description="ID of the associated job description", example=1)


class InterviewQuestionResponse(InterviewQuestionBase):
    id: int
    job_description_id: int
    created_at: datetime
    updated_at: Optional[datetime] = None
    
    class Config:
        orm_mode = True


# AI Generation Request Schemas
class GenerateJDRequest(BaseModel):
    hiring_request_id: Optional[int] = Field(None, description="ID of the associated hiring request")
    job_title: str = Field(..., description="Job title", example="Senior Software Engineer")
    department: str = Field(..., description="Department", example="Engineering")
    experience_level: str = Field(..., description="Experience level", example="Senior")
    skills_required: List[str] = Field(..., description="Required skills", example=["Python", "React", "Cloud"])
    job_type: str = Field(..., description="Job type", example="Full-time")
    location: str = Field(..., description="Job location", example="Remote")
    additional_context: Optional[str] = Field(
        None, 
        description="Additional context for the AI to consider",
        example="We're looking for someone who can lead our backend team and mentor junior developers."
    )


class GenerateQuestionsRequest(BaseModel):
    count: int = Field(
        5, 
        description="Number of questions to generate", 
        example=5,
        ge=1,
        le=20
    )
    question_types: List[str] = Field(
        ["behavioral", "technical", "situational"],
        description="Types of questions to generate",
        example=["behavioral", "technical"]
    )
    difficulty_level: str = Field(
        "medium",
        description="Difficulty level of questions",
        example="medium"
    )
    
    @validator('question_types')
    def validate_question_types(cls, v):
        valid_types = ["behavioral", "technical", "situational"]
        for t in v:
            if t not in valid_types:
                raise ValueError(f"Invalid question type: {t}. Must be one of {valid_types}")
        return v
    
    @validator('difficulty_level')
    def validate_difficulty_level(cls, v):
        valid_levels = ["easy", "medium", "hard"]
        if v not in valid_levels:
            raise ValueError(f"Invalid difficulty level: {v}. Must be one of {valid_levels}")
        return v
