# Dockerfile.backend
#
# This Dockerfile creates a production-ready, multi-stage container for the FastAPI backend.
# This approach ensures the final image is optimized for size and security.
#
# Stage 1: Builder - Installs dependencies and builds wheels.
# Stage 2: Final - Creates the final, clean image with the application and its runtime dependencies.

# ===================================================================================
# Stage 1: Builder Environment
# This stage installs build-time dependencies and pre-compiles Python packages into wheels.
# ===================================================================================
FROM python:3.9-slim-buster AS builder

# Set environment variables for optimized Python execution in Docker
ENV PYTHONDONTWRITEBYTECODE 1
ENV PYTHONUNBUFFERED 1

# Set the working directory
WORKDIR /app

# Install system dependencies required for building Python packages (e.g., psycopg2)
# Using --no-install-recommends keeps the layer smaller.
RUN apt-get update && \
    apt-get install -y --no-install-recommends gcc build-essential libpq-dev && \
    rm -rf /var/lib/apt/lists/*

# Copy the requirements file
COPY backend/requirements.txt .

# Create a virtual environment and install dependencies into it.
# Building wheels allows for faster installation in the final stage.
RUN python -m venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"
RUN pip install --upgrade pip
RUN pip wheel --no-cache-dir --wheel-dir /wheels -r requirements.txt

# ===================================================================================
# Stage 2: Production Environment
# This stage creates the final lightweight image.
# ===================================================================================
FROM python:3.9-slim-buster

# Set environment variables
ENV PYTHONDONTWRITEBYTECODE 1
ENV PYTHONUNBUFFERED 1

# Set the working directory
WORKDIR /app

# Create a non-root user to run the application for better security
RUN addgroup --system appgroup && adduser --system --ingroup appgroup appuser

# Install only the necessary runtime system dependencies (e.g., for psycopg2)
RUN apt-get update && \
    apt-get install -y --no-install-recommends libpq5 && \
    rm -rf /var/lib/apt/lists/*

# Create the virtual environment
RUN python -m venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"

# Copy the pre-built wheels from the builder stage
COPY --from=builder /wheels /wheels
COPY backend/requirements.txt .

# Install the Python dependencies from the wheels, which is much faster
# and doesn't require the build-time system dependencies.
RUN pip install --no-cache-dir -r requirements.txt --find-links=/wheels

# Copy the application source code into the container
COPY backend/ .

# Change the ownership of the application directory to the non-root user
RUN chown -R appuser:appgroup /app

# Switch to the non-root user
USER appuser

# Expose the port the application will run on.
# Cloud Run expects port 8080
EXPOSE 8080

# Set the command to run the application using Uvicorn.
# --host 0.0.0.0 makes the server accessible from outside the container.
# --port 8080 matches Cloud Run requirements.
CMD ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8080"]
